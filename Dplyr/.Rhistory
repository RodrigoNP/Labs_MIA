#Podemos hacer particiones de vectores usando operadores logicos
vector[vector<5]
y[coin_toss=='aguila']
numeric.var<-1
character.var<-'Mexico'
factor.var<-factor(1, labels = 'one')
logic.var<- TRUE #Booleanos # TRUE= T, FALSE= F
knitr::opts_chunk$set(echo = TRUE)
#Podemos hacer particiones de vectores usando operadores logicos
vector[!vector<5]
#Podemos hacer particiones de vectores usando operadores logicos
vector[vector<5]
#Para obetener el complemento de ese vector
vector[!vector<5]
sort(c(1,5,3,7,45,6,23,-45))
(344:899)
(344:899)%%4
rm(list=ls())
n<-4000
id<-1:n
sex<-sample(c('h','m'),n)
sex<-sample(c('h','m'), n, replace = T)
sex
knitr::opts_chunk$set(echo = TRUE)
n<-4000
id<-1:n
sex<-sample(c('h','m'), n, replace = T)
edad<-runif(n, min=17, max=27)
floor(edad)
edad<-floor(edad)
carrera<-sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T)
prom<-runif(n, 6, 10)
df<-data.frame(id, sex, edad, carrera, prom)
# Cramos DF con la funcion data.frame()
df<-data.frame(id, sex, edad, carrera, prom)
df
df<-data.frame(id, sex, edad, carrera, prom)
print(df)
knitr::opts_chunk$set(echo = TRUE)
n<-4000
id<-1:n
sex<-sample(c('h','m'), n, replace = T)
edad<-runif(n, min = 17, max = 27) # Se pueden omitir las palabras max y min y solo poner los numeros
edad<-floor(edad)
carrera<-sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T)
prom<-runif(n, 6, 10)
df<-data.frame(id, sex, edad, carrera, prom)
print(df)
View(df)
View(df)
df<-data.frame(id=1:n,
sex=sample(c('h','m'), n, replace = T)),
df<-data.frame(id=1:n,
sex=sample(c('h','m'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10))
df<-data.frame(
id=1:n,
sex=sample(c('h','m'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10)
) #manera alternativa de crear el df directamente, sin crear nuevas variables
View(df)
str(df)
df$prom
with(df, table(carrera, prom))
with(df, table(carrera, mean(prom)))
with(df, table(carrera, mean(prom)))
with(df, mean(prom))
with(df, mean(prom))
df_female_ri<-filter(df, sex=='m' & carrera=='ri')
df_female_ri<-filter(df, sex=='m' & carrera=='ri')
######
# Data Frames
######
rm(list=ls())
## Creacion de DF##
# Aprovechemos lo que aprendimos para crear un DF.
n<-4000
id<-1:n
sex<-sample(c('h','m','o'), n, replace = T)
edad<-floor(runif(n, min=17, max=27)) # Se pueden omitir las palabras max y min y solo poner los numeros
carrera<-sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T)
prom<-runif(n, 6, 10)
# Cramos DF con la funcion data.frame()
df<-data.frame(id, sex, edad, carrera, prom)
## Semillas ##
# Por replicabilidad, siempre hay que correr una semilla para que se puedan obtener los mismo datos aleatorios
set.seed(2020)
df<-data.frame(
id=1:n,
sex=sample(c('h','m'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10)
) #manera alternativa de crear el df directamente, sin crear nuevas variables
## Visualizaciones del df ##
# Muchas maneras de darnos una idea de lo que contiene un df
summary(df)
head(df)
str(df)
## Particiones de DF ##
# Podemos llamar los vectores de las variables con "$"
df$prom
#Podemos operar con este vector como con cualquier otro
mean(df$prom)
df$prom[5]
# podemos tomar rebanadas del df:
# df[filas, columnas]
df[1:2, c(2:3,5)]
## Algunas funciones importantes para DF
with(df, mean(prom))
df_female_ri<-filter(df, sex=='m' & carrera=='ri')
df_female_ri<-subset(df, sex=='m' & carrera=='ri')
View(df_female_ri)
######
# Data Frames
######
rm(list=ls())
## Creacion de DF##
# Aprovechemos lo que aprendimos para crear un DF.
n<-4000
id<-1:n
sex<-sample(c('h','m','o'), n, replace = T)
edad<-floor(runif(n, min=17, max=27)) # Se pueden omitir las palabras max y min y solo poner los numeros
carrera<-sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T)
prom<-runif(n, 6, 10)
# Cramos DF con la funcion data.frame()
df<-data.frame(id, sex, edad, carrera, prom)
## Semillas ##
# Por replicabilidad, siempre hay que correr una semilla para que se puedan obtener los mismo datos aleatorios
set.seed(2020)
df<-data.frame(
id=1:n,
sex=sample(c('h','m'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10)
) #manera alternativa de crear el df directamente, sin crear nuevas variables
## Visualizaciones del df ##
# Muchas maneras de darnos una idea de lo que contiene un df
summary(df)
head(df)
str(df)
## Particiones de DF ##
# Podemos llamar los vectores de las variables con "$"
df$prom
#Podemos operar con este vector como con cualquier otro
mean(df$prom)
df$prom[5]
# podemos tomar rebanadas del df:
# df[filas, columnas]
df[1:2, c(2:3,5)]
## Algunas funciones importantes para DF
# with #
with(df, mean(prom))
# subset #
# Para tomar subconjuntos de las bases de datos
df_female_ri<-filter(df, sex=='m' & carrera=='ri')
# ifelse() #
# Es muy util para crear dummies.
df$female<-ifelse(sex=='m', 1, 0)
df
df<-filter(df, sex=='m')
######
# Data Frames
######
rm(list=ls())
## Creacion de DF##
# Aprovechemos lo que aprendimos para crear un DF.
n<-4000
id<-1:n
sex<-sample(c('h','m','o'), n, replace = T)
edad<-floor(runif(n, min=17, max=27)) # Se pueden omitir las palabras max y min y solo poner los numeros
carrera<-sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T)
prom<-runif(n, 6, 10)
# Cramos DF con la funcion data.frame()
df<-data.frame(id, sex, edad, carrera, prom)
## Semillas ##
# Por replicabilidad, siempre hay que correr una semilla para que se puedan obtener los mismo datos aleatorios
set.seed(2020)
df<-data.frame(
id=1:n,
sex=sample(c('h','m'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10)
) #manera alternativa de crear el df directamente, sin crear nuevas variables
## Visualizaciones del df ##
# Muchas maneras de darnos una idea de lo que contiene un df
summary(df)
head(df)
str(df)
## Particiones de DF ##
# Podemos llamar los vectores de las variables con "$"
df$prom
#Podemos operar con este vector como con cualquier otro
mean(df$prom)
df$prom[5]
# podemos tomar rebanadas del df:
# df[filas, columnas]
df[1:2, c(2:3,5)]
## Algunas funciones importantes para DF
# with #
with(df, mean(prom))
# subset #
# Para tomar subconjuntos de las bases de datos
df_female_ri<-filter(df, sex=='m' & carrera=='ri')
# ifelse() #
# Es muy util para crear dummies.
df$female<-ifelse(sex=='m', 1, 0)
df
df2<-filter(df, sex=='m')
df2
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
with(df, mean(prom))
rm(list=ls())
# Creemos de nuevo del df de alumnos del ITAM
set.seed(2020)
n<-4000
df<-data.frame(
id=1:n,
sex=sample(c('h','m'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10)
)
with(df, mean(prom))
with(df, mean(prom))
means<-NULL
num.reps<-5000
for (i in 1:num.reps) {
df<-data.frame(
id=1:n,
sex=sample(c('h','m'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10))
means[i]<-with(df, mean(prom))
}
(density(means))
(plot(density(means)))
(plot(density(means),
ylab='',
main = ''))
mtcars<-data("mtcars")
mtcars<-data("mtcars")
mtcars<-data(mtcars)
mtcars
mtcars<-data("mtcars")
mtcars
mtcars<-data("mtcars")
mtcars<-data(mtcars)
rm(list=ls())
# Creemos de nuevo del df de alumnos del ITAM
set.seed(2020)
n<-4000
df<-data.frame(
id=1:n,
sex=sample(c('h','m','o'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10)
)
with(df, mean(prom))
## For loops ##
# Si queremos hacer esto varias veces, conviene hacer un foor loop
# Necesitamos un vector vacio para guardar los promedios
means<-NULL
# se acostumbra crear una variable que indique el # de repeticiones para despues modificar facilmente
num.reps<-5000
for (i in 1:num.reps) {
df<-data.frame(
id=1:n,
sex=sample(c('h','m','o'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10)) #Creamos el df
means[i]<-with(df, mean(prom)) #Guardamos en el vector
}
## Para hacer la grÃ¡fica
(plot(density(means),
ylab='',
main = ''))
mtcars<-data(mtcars)
data("mtcars")
force(mtcars)
head('mtcars')
head(mtcars)
View(mtcars)
20%%2
!20%%2
View(df)
if(2>0){
print('Hola')
}
## Nested loops ##
for (i in 57:65) {
if(!i %%2){
print(i)
next
}
}
carrer.mean<-function(data_frame){
for (i in df$carrera ) {
return(
paste0(c(
i,':',  with(subset(df, i ), mean(prom))
))
)
}
}
n<-4000
df<-data.frame(
id=1:n,
sex=sample(c('h','m','o'), n, replace = T),
edad=floor(runif(n, min=17, max=27)),
carrera=sample(c('eco','cpol','ri','derecho','conta','mat'), n, replace = T),
prom=runif(n, 6, 10)
)
carrer.mean<-function(data_frame){
for (i in df$carrera ) {
return(
paste0(c(
i,':',  with(subset(df, i ), mean(prom))
))
)
}
}
carrer.mean(df)
carrer.mean<-function(data_frame){
for (i in df$carrera ) {
return(
paste0(c(
i,':',  with(subset(df, carrera==i ), mean(prom))
))
)
}
}
carrer.mean(df)
carrer.mean<-function(data_frame){
for (i in df$carrera ) {
return(
paste0(c(
i,':',  with(subset(df, carrera==i ), mean(prom))
))
)
next
}
}
carrer.mean(df)
carrer.mean<-function(data_frame){
for (i in df$carrera ) {
return(print(i,':',  with(subset(df, carrera==i ), mean(prom))))
}
}
carrer.mean(df)
carrer.mean<-function(data_frame){
for (i in df$carrera ) {
return(
paste0(c(
i,':',  with(subset(df, carrera==i ), mean(prom))
))
)
next
}
}
carrer.mean(df)
carrer.mean<-function(data_frame){
for (i in df$carrera ) {
return(
print(paste0(c(
i,':',  with(subset(df, carrera==i ), mean(prom))
))
))
}
}
carrer.mean(df)
career.mean<-function(data_frame){
career_mean<-NULL
for (i in df$carrera ) {
career_mean[i]<-with(subset(df, carrera==i))
}
return(career_mean)
}
carrer.mean(df)
career.mean<-function(data_frame){
career_mean<-NULL
for (i in df$carrera ) {
career_mean[i]<-with(subset(df, carrera==i))
}
return(career_mean)
}
carrer.mean(df)
career.mean(df)
career.mean<-function(data_frame){
career_mean<-NULL
for (i in df$carrera ) {
career_mean[i]<-with(subset(df, carrera==i), mean(prom))
}
return(career_mean)
}
career.mean(df)
with(subset(df, carrera==i), mean(prom))
with(subset(df, carrera=='ri'), mean(prom))
career_mean[i]<-with(subset(df, carrera==i), mean(prom))
career_mean<-NULL
for (i in df$carrera ) {
career_mean[i]<-with(subset(df, carrera==i), mean(prom))
View(carrer.mean)
View(career.mean)
for (i in df$carrera ) {
career_mean[i]<-with(subset(df, carrera==i), mean(prom))
}
career_mean<-NULL
for (i in df$carrera ) {
career_mean[i]<-with(subset(df, carrera==i), mean(prom))
}
View(career.mean)
## Algunas aclaraciones sobre funciones ##
potencia<- function(x, p=2){
return(x^p)
}
potencia(2)
## Algunas aclaraciones sobre funciones ##
potencia<- function(x, p=2){
return(x^p)
}
potencia(2)
potencia<- function(x, p=2){
result<-x^p
return(result)
}
potencia(2)
## Algunas aclaraciones sobre funciones ##
potencia<- function(x, p=2){
result<-x^p
return(result)
}
potencia<- function(x, p=2){
result<-x^p
return(result)
}
potencia<- function(x, p=2){
result<-x^p
return(result)
}
potencia<- function(x, p=2){
result<-x^p
return(result)
}
## Algunas aclaraciones sobre funciones ##
potencia<- function(x, p=2){
result<-x^p
return(result)
}
potencia<- function(x, p=2){
result<-x^p
return(result)
}
potencia(2)
## Algunas aclaraciones sobre funciones ##
potencia<- function(x, p){
result<-x^p
return(result)
}
## Algunas aclaraciones sobre funciones ##
potencia<- function(x, p){
result<-x^p
return(result)
}
potencia<- function(x, y=2){
result<-x^y
return(result)
}
potencia(2)
potencia<- function(x, y=2){
result<-x^y
return(result)
}
potencia(2,2)
potencia<- function(x, y=2){
result<-x^y
return(result)
}
potencia<- function(x, y=2){
result<-x^y
return(result)
}
potencia<- function(x, y=2){
result<-x^y
return(result)
}
potencia<- function(x, y=2) {
result<-x^y
return(result)
}
potencia<- function(x, y=2) {
result<-x^y
return(result)
}
# Modificando el directorio #
setwd('C:/Users/rodri/OneDrive - INSTITUTO TECNOLOGICO AUTONOMO DE MEXICO/Labs MIA/Dplyr')
min<-readxl::read_excel('WhoGov_within_V1.1.xlsx')
# LLamando directamente al archivo #
min<- readxl:: read_excel('C:/Users/rodri/OneDrive - INSTITUTO TECNOLOGICO AUTONOMO DE MEXICO/Labs MIA/Dplyr/WhoGov_within_V1.1.xlsx')
View(min)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
